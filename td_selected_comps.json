[
  {
    "name": "Onyx",
    "type": "containerCOMP",
    "path": "/Onyx",
    "children": [
      {
        "name": "dmx_in_onyx",
        "type": "dmxinCHOP",
        "path": "/Onyx/dmx_in_onyx"
      },
      {
        "name": "ndi_in_onyx",
        "type": "ndiinTOP",
        "path": "/Onyx/ndi_in_onyx"
      },
      {
        "name": "osc_in_onyx",
        "type": "oscinDAT",
        "path": "/Onyx/osc_in_onyx"
      },
      {
        "name": "ndi_out_onyx",
        "type": "ndioutTOP",
        "path": "/Onyx/ndi_out_onyx"
      },
      {
        "name": "osc_out_onyx",
        "type": "oscoutDAT",
        "path": "/Onyx/osc_out_onyx"
      },
      {
        "name": "dmx_in_filterdat",
        "type": "tableDAT",
        "path": "/Onyx/dmx_in_filterdat"
      },
      {
        "name": "osc_in_onyx_callbacks",
        "type": "textDAT",
        "path": "/Onyx/osc_in_onyx_callbacks",
        "text": "# This script is executed by the oscinDAT when a message is received.\n\n# Get a reference to our Onyx-specific parser module\nonyx_parser = mod('onyx_osc_parser')\n\n# Get a reference to the table where we'll store the results\n# This table should have two columns: 'signal' and 'value'\n# and its first row should be a header.\noutput_table = op('normalized_signals')\n\ndef onReceiveOSC(dat, rowIndex, message, address, args, peer):\n    \"\"\"\n    Called by the oscinDAT.\n    \"\"\"\n    try:\n        # Use our dedicated parser to process the message\n        signal_name, norm_value = onyx_parser.parse_message(address, args)\n\n        # Store the result in our output table.\n        # This makes the signal available to the rest of the /Onyx component.\n        output_table[signal_name, 'value'] = norm_value\n\n    except ValueError as e:\n        # Log errors for debugging, but don't stop the network\n        debug(e)\n        \n    return\n"
      },
      {
        "name": "ndi_in_onyx_grouptable",
        "type": "tableDAT",
        "path": "/Onyx/ndi_in_onyx_grouptable"
      },
      {
        "name": "ndi_out_onyx_grouptable",
        "type": "tableDAT",
        "path": "/Onyx/ndi_out_onyx_grouptable"
      },
      {
        "name": "onyx_osc_parser",
        "type": "textDAT",
        "path": "/Onyx/onyx_osc_parser",
        "text": "\"\"\"\nParses OSC messages specific to Obsidian Onyx, using the generic signal_mapper.\n\nThis script will be placed in a Text DAT inside the /Onyx COMP.\n\"\"\"\nimport logging\nfrom typing import Tuple\n\n# Reference the generic mapper from the central /scripts COMP\nmapper = mod('/scripts/signal_mapper')\nLOGGER = logging.getLogger(__name__)\n\ndef parse_message(address: str, args: list) -> Tuple[str, float]:\n    \"\"\"\n    Parses an Onyx OSC message.\n    Onyx uses the '/Mx' namespace.\n    Example Addresses:\n    - /Mx/fader/4203\n    - /Mx/button/6101\n    - /Mx/playback/page1/3/go\n\n    Returns\n    -------\n    Tuple[str, float]\n        (signal_name, normalized_value) e.g. ('fader/4203', 1.0)\n    \"\"\"\n    try:\n        # Use the generic parser with the 'Mx' namespace\n        name, norm_value = mapper.parse_osc_message(address, args, namespace='Mx')\n\n        LOGGER.debug(\"Parsed Onyx OSC %s -> %s:%f\", address, name, norm_value)\n        return name, norm_value\n\n    except ValueError as e:\n        # Re-raise the exception to be handled by the caller\n        raise ValueError(f\"Failed to parse Onyx message: {e}\") from e\n"
      },
      {
        "name": "normalized_signals",
        "type": "tableDAT",
        "path": "/Onyx/normalized_signals",
        "text": "signal\tvalue\n"
      }
    ]
  },
  {
    "name": "APC40",
    "type": "containerCOMP",
    "path": "/APC40",
    "children": [
      {
        "name": "midi_in_APC40",
        "type": "midiinCHOP",
        "path": "/APC40/midi_in_APC40"
      }
    ]
  },
  {
    "name": "Router",
    "type": "containerCOMP",
    "path": "/Router",
    "children": [
      {
        "name": "oscout1",
        "type": "oscoutDAT",
        "path": "/Router/oscout1"
      },
      {
        "name": "ndi_in_router",
        "type": "ndiinTOP",
        "path": "/Router/ndi_in_router"
      },
      {
        "name": "osc_in_router",
        "type": "oscinDAT",
        "path": "/Router/osc_in_router"
      },
      {
        "name": "ndi_out_router",
        "type": "ndioutTOP",
        "path": "/Router/ndi_out_router"
      },
      {
        "name": "osc_in_callbacks",
        "type": "textDAT",
        "path": "/Router/osc_in_callbacks"
      },
      {
        "name": "ndi_in_grouptable",
        "type": "tableDAT",
        "path": "/Router/ndi_in_grouptable"
      },
      {
        "name": "ndi_out_grouptable",
        "type": "tableDAT",
        "path": "/Router/ndi_out_grouptable"
      }
    ]
  },
  {
    "name": "APCmini",
    "type": "containerCOMP",
    "path": "/APCmini",
    "children": [
      {
        "name": "midi_in_APCmini",
        "type": "midiinCHOP",
        "path": "/APCmini/midi_in_APCmini"
      }
    ]
  },
  {
    "name": "scripts",
    "type": "baseCOMP",
    "path": "/scripts",
    "children": []
  },
  {
    "name": "Resolume",
    "type": "containerCOMP",
    "path": "/Resolume",
    "children": []
  },
  {
    "name": "Quickshow",
    "type": "containerCOMP",
    "path": "/Quickshow",
    "children": [
      {
        "name": "midiout1",
        "type": "midioutCHOP",
        "path": "/Quickshow/midiout1"
      },
      {
        "name": "osc_in_qs",
        "type": "oscinDAT",
        "path": "/Quickshow/osc_in_qs"
      },
      {
        "name": "osc_in_qs_callbacks",
        "type": "textDAT",
        "path": "/Quickshow/osc_in_qs_callbacks"
      }
    ]
  },
  {
    "name": "TD_network_export",
    "type": "executeDAT",
    "path": "/TD_network_export",
    "children": []
  }
]